// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: api/proto/sequential_id.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SequentialIDServiceClient is the client API for SequentialIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SequentialIDServiceClient interface {
	// Get next sequential ID for a prefix
	GetNext(ctx context.Context, in *GetNextRequest, opts ...grpc.CallOption) (*GetNextResponse, error)
	// Get next batch of sequential IDs
	GetNextBatch(ctx context.Context, in *GetNextBatchRequest, opts ...grpc.CallOption) (*GetNextBatchResponse, error)
	// Reset counter for a prefix
	ResetCounter(ctx context.Context, in *ResetCounterRequest, opts ...grpc.CallOption) (*ResetCounterResponse, error)
	// Get counter status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Get health status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	// Get configuration for a prefix
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// Update configuration for a prefix
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
}

type sequentialIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSequentialIDServiceClient(cc grpc.ClientConnInterface) SequentialIDServiceClient {
	return &sequentialIDServiceClient{cc}
}

func (c *sequentialIDServiceClient) GetNext(ctx context.Context, in *GetNextRequest, opts ...grpc.CallOption) (*GetNextResponse, error) {
	out := new(GetNextResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/GetNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) GetNextBatch(ctx context.Context, in *GetNextBatchRequest, opts ...grpc.CallOption) (*GetNextBatchResponse, error) {
	out := new(GetNextBatchResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/GetNextBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) ResetCounter(ctx context.Context, in *ResetCounterRequest, opts ...grpc.CallOption) (*ResetCounterResponse, error) {
	out := new(ResetCounterResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/ResetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequentialIDServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, "/sequentialid.SequentialIDService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SequentialIDServiceServer is the server API for SequentialIDService service.
// All implementations must embed UnimplementedSequentialIDServiceServer
// for forward compatibility
type SequentialIDServiceServer interface {
	// Get next sequential ID for a prefix
	GetNext(context.Context, *GetNextRequest) (*GetNextResponse, error)
	// Get next batch of sequential IDs
	GetNextBatch(context.Context, *GetNextBatchRequest) (*GetNextBatchResponse, error)
	// Reset counter for a prefix
	ResetCounter(context.Context, *ResetCounterRequest) (*ResetCounterResponse, error)
	// Get counter status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Get health status
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	// Get configuration for a prefix
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// Update configuration for a prefix
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	mustEmbedUnimplementedSequentialIDServiceServer()
}

// UnimplementedSequentialIDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSequentialIDServiceServer struct {
}

func (UnimplementedSequentialIDServiceServer) GetNext(context.Context, *GetNextRequest) (*GetNextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNext not implemented")
}
func (UnimplementedSequentialIDServiceServer) GetNextBatch(context.Context, *GetNextBatchRequest) (*GetNextBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextBatch not implemented")
}
func (UnimplementedSequentialIDServiceServer) ResetCounter(context.Context, *ResetCounterRequest) (*ResetCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCounter not implemented")
}
func (UnimplementedSequentialIDServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSequentialIDServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedSequentialIDServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedSequentialIDServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedSequentialIDServiceServer) mustEmbedUnimplementedSequentialIDServiceServer() {}

// UnsafeSequentialIDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SequentialIDServiceServer will
// result in compilation errors.
type UnsafeSequentialIDServiceServer interface {
	mustEmbedUnimplementedSequentialIDServiceServer()
}

func RegisterSequentialIDServiceServer(s grpc.ServiceRegistrar, srv SequentialIDServiceServer) {
	s.RegisterService(&SequentialIDService_ServiceDesc, srv)
}

func _SequentialIDService_GetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).GetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/GetNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).GetNext(ctx, req.(*GetNextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_GetNextBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).GetNextBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/GetNextBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).GetNextBatch(ctx, req.(*GetNextBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_ResetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).ResetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/ResetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).ResetCounter(ctx, req.(*ResetCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequentialIDService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequentialIDServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sequentialid.SequentialIDService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequentialIDServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SequentialIDService_ServiceDesc is the grpc.ServiceDesc for SequentialIDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SequentialIDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sequentialid.SequentialIDService",
	HandlerType: (*SequentialIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNext",
			Handler:    _SequentialIDService_GetNext_Handler,
		},
		{
			MethodName: "GetNextBatch",
			Handler:    _SequentialIDService_GetNextBatch_Handler,
		},
		{
			MethodName: "ResetCounter",
			Handler:    _SequentialIDService_ResetCounter_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SequentialIDService_GetStatus_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _SequentialIDService_Health_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _SequentialIDService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _SequentialIDService_UpdateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/sequential_id.proto",
}
