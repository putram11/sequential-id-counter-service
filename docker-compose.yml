version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # REST API
      - "9090:9090"  # gRPC
      - "2112:2112"  # Metrics
      - "8081:8081"  # Health checks
    environment:
      # Service Configuration
      - PORT=8080
      - GRPC_PORT=9090
      - LOG_LEVEL=info
      - ENVIRONMENT=development
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_CLUSTER_MODE=false
      
      # RabbitMQ Configuration
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_EXCHANGE=seq_exchange
      - RABBITMQ_QUEUE=seq_log_queue
      
      # PostgreSQL Configuration
      - DB_URL=postgres://sequser:seqpass@postgres:5432/seqdb?sslmode=disable
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      
      # Security
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - API_KEY=dev-api-key-change-in-production
      
      # Monitoring
      - METRICS_PORT=2112
      - HEALTH_CHECK_PORT=8081
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - seq-network

  # Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      # Service Configuration
      - LOG_LEVEL=info
      - ENVIRONMENT=development
      - WORKER_CONCURRENCY=5
      
      # RabbitMQ Configuration
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_EXCHANGE=seq_exchange
      - RABBITMQ_QUEUE=seq_log_queue
      
      # PostgreSQL Configuration
      - DB_URL=postgres://sequser:seqpass@postgres:5432/seqdb?sslmode=disable
      - DB_MAX_OPEN_CONNS=10
      - DB_MAX_IDLE_CONNS=2
      
      # Monitoring
      - METRICS_PORT=2113
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - seq-network
    deploy:
      replicas: 2

  # Redis - Counter Store
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory-policy noeviction
      --tcp-keepalive 60
      --timeout 0
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - seq-network

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./scripts/rabbitmq-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - seq-network

  # PostgreSQL - Source of Truth
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=seqdb
      - POSTGRES_USER=sequser
      - POSTGRES_PASSWORD=seqpass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sequser -d seqdb"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - seq-network

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - seq-network

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - seq-network

  # Adminer - Database Management (Development Only)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - seq-network
    profiles:
      - dev

  # Redis Commander - Redis Management (Development Only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - seq-network
    profiles:
      - dev

volumes:
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  seq-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
